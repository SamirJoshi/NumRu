var searchIndex = {};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",4,null],[13,"Left","","Only the left value of type `A` is present.",4,null],[13,"Right","","Only the right value of type `B` is present.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"flatten","","Flatten an iterable of iterables into a single combined sequence of all the elements in the iterables.",null,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",null,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",null,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",6,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",9,null],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"all","","",9,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",9,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"fold","","",10,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fold","","",21,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"collect","","",21,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"collect","","",23,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","itertools::structs","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",29,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"next_back","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",36,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"from","","",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both have run out.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",43,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",43,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",43,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",43,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",43,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergejoinby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",43,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",43,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",43,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Flatten an iterator of iterables into a single combined sequence of all the elements in the iterables.",43,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",43,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"positions"}}],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"all_equal","","Check whether all elements compare equal.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",43,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",43,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"format","","Format all iterator elements, separated by `sep`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",43,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",43,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like manner.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",43,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",43,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",43,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"foldwhile"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Return the value in the continue or done.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"extend","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref_mut","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"Unfold"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Intersperse"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["main"] = {"doc":"","items":[[5,"main","main","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["matrixmultiply"] = {"doc":"General matrix multiplication for f32, f64 matrices.","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",null,null],[5,"dgemm","","General matrix multiplication (f64)",null,null]],"paths":[]};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an n-dimensional container for general elements and for numerics.","items":[[3,"Axis","ndarray","An axis index.",null,null],[12,"0","","",0,null],[3,"AxisDescription","","Description of the axis, its length and its stride.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"Dim","","Dimension description.",null,null],[3,"IxDynImpl","","Dynamic dimension or index type.",null,null],[3,"ShapeError","","An error related to array shape or layout.",null,null],[3,"Slice","","A slice (range with step size).",null,null],[12,"start","","",2,null],[12,"end","","",2,null],[12,"step","","",2,null],[3,"SliceInfo","","Represents all of the necessary information to perform a slice.",null,null],[3,"Zip","","Lock step function application across several arrays or other producers.",null,null],[3,"ArrayBase","","An n-dimensional array.",null,null],[3,"OwnedRepr","","Array's representation.",null,null],[3,"OwnedArcRepr","","ArcArray's representation.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Shape","","A contiguous array shape of n dimensions.",null,null],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",null,null],[4,"ErrorKind","","Error code for an error related to array shape or layout.",null,null],[13,"IncompatibleShape","","incompatible shape",3,null],[13,"IncompatibleLayout","","incompatible memory layout",3,null],[13,"RangeLimited","","the shape does not fit inside type limits",3,null],[13,"OutOfBounds","","out of bounds indexing",3,null],[13,"Unsupported","","aliasing array elements",3,null],[4,"SliceOrIndex","","A slice (range with step) or an index.",null,null],[13,"Slice","","A range with step size. Negative `begin` or `end` indexes are counted from the back of the axis. If `end` is `None`, the slice extends to the end of the axis.",4,null],[12,"start","ndarray::SliceOrIndex","",4,null],[12,"end","","",4,null],[12,"step","","",4,null],[13,"Index","ndarray","A single index.",4,null],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"Dim","","Create a new dimension value.",null,null],[5,"indices","","Create an iterable of the array shape `shape`.",null,{"inputs":[{"name":"e"}],"output":{"name":"indices"}}],[5,"indices_of","","Return an iterable of the indices of the passed-in array.",null,{"inputs":[{"name":"arraybase"}],"output":{"name":"indices"}}],[5,"stack","","Stack arrays along the given axis.",null,null],[5,"Ix0","","Create a zero-dimensional index",null,{"inputs":[],"output":{"name":"ix0"}}],[5,"Ix1","","Create a one-dimensional index",null,{"inputs":[{"name":"ix"}],"output":{"name":"ix1"}}],[5,"Ix2","","Create a two-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"ix2"}}],[5,"Ix3","","Create a three-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix3"}}],[5,"Ix4","","Create a four-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix4"}}],[5,"Ix5","","Create a five-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix5"}}],[5,"Ix6","","Create a six-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix6"}}],[5,"IxDyn","","Create a dynamic-dimensional index",null,null],[5,"arr0","","Create a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array0"}}],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview0"}}],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"aview_mut2","","Create a two-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"generics":["ix1"],"name":"arraybase"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"_data_slice","","",7,null],[11,"ensure_unique","","",7,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone_with_ptr","","",7,null],[11,"_data_slice","","",8,null],[11,"clone_with_ptr","","",8,null],[11,"clone_from_with_ptr","","",8,null],[11,"_data_slice","","",9,null],[11,"clone_with_ptr","","",9,null],[11,"_data_slice","","",9,null],[11,"new","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ownedrcrepr"}}],[11,"into_owned","","",8,{"inputs":[{"name":"arraybase"}],"output":{"generics":["ownedrepr"],"name":"arraybase"}}],[11,"new","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ownedrcrepr"}}],[11,"into_owned","","",7,{"inputs":[{"name":"arraybase"}],"output":{"generics":["ownedrepr"],"name":"arraybase"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Return the index of the axis.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into_dimension","","",10,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"dim"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"dim"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_pattern","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"into_pattern","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"default_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"max_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"last_elem","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_last_elem","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"default_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fortran_strides","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"next_for","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"_fastest_varying_stride_order","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"ndim","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",11,null],[11,"slice","","",11,null],[11,"slice_mut","","",11,null],[11,"zero_index_with_ndim","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",11,null],[11,"try_remove_axis","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ixdynimpl"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ixdynimpl"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ixdynimpl"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"ixdynimpl"}}],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"generics":["ix"],"name":"vec"}],"output":{"name":"self"}}],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"self"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",11,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix0"}}],[11,"remove_axis","","",11,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix1"}}],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"remove_axis","","",11,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"axis","","Return axis",1,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"len","","Return length",1,{"inputs":[{"name":"self"}],"output":{"name":"ix"}}],[11,"stride","","Return stride",1,{"inputs":[{"name":"self"}],"output":{"name":"ixs"}}],[0,"iter","","Producers, iterables and iterators.",null,null],[3,"Axes","ndarray::iter","An iterator over the length and stride of each axis of an array.",null,null],[3,"Indices","","Indices producer and iterable.",null,null],[3,"IndicesIter","","An iterator over the indexes of an array shape.",null,null],[3,"Iter","","An iterator over the elements of an array.",null,null],[3,"IterMut","","An iterator over the elements of an array (mutable).",null,null],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[3,"Lanes","","See `.lanes()` for more information.",null,null],[3,"LanesMut","","See `.lanes_mut()` for more information.",null,null],[3,"LanesIter","","An iterator that traverses over all dimensions but the innermost, and yields each inner row.",null,null],[3,"LanesIterMut","","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).",null,null],[3,"AxisIter","","An iterator that traverses over an axis and and yields each subview.",null,null],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields each subview (mutable)",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.",null,null],[3,"ExactChunks","","Exact chunks producer and iterable.",null,null],[3,"ExactChunksIter","","Exact chunks iterator.",null,null],[3,"ExactChunksMut","","Exact chunks producer and iterable.",null,null],[3,"ExactChunksIterMut","","Exact chunks iterator.",null,null],[3,"Windows","","Window producer and iterable",null,null],[11,"clone","ndarray","",2,{"inputs":[{"name":"self"}],"output":{"name":"slice"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"slice"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"new","","Create a new `Slice` with the given extents.",2,{"inputs":[{"name":"isize"},{"generics":["isize"],"name":"option"},{"name":"isize"}],"output":{"name":"slice"}}],[11,"step_by","","Create a new `Slice` with the given step size (multiplied with the previous step size).",2,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["isize"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"range"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"rangefrom"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"generics":["i32"],"name":"rangeto"}],"output":{"name":"slice"}}],[11,"from","","",2,{"inputs":[{"name":"rangefull"}],"output":{"name":"slice"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"sliceorindex"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"sliceorindex"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_slice","","Returns `true` if `self` is a `Slice` value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_index","","Returns `true` if `self` is an `Index` value.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_by","","Returns a new `SliceOrIndex` with the given step size (multiplied with the previous step size).",4,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"slice"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"isize"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["isize"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"range"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"rangefrom"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"generics":["i32"],"name":"rangeto"}],"output":{"name":"sliceorindex"}}],[11,"from","","",4,{"inputs":[{"name":"rangefull"}],"output":{"name":"sliceorindex"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",12,null],[11,"new","","Returns a new `SliceInfo` instance.",12,{"inputs":[{"name":"t"}],"output":{"generics":["sliceinfo","shapeerror"],"name":"result"}}],[11,"out_ndim","","Returns the number of dimensions after calling `.slice()` (including taking subviews).",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",12,null],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"sliceinfo"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","ndarray::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"indicesiter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"into_iter","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"indices"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contiguous_stride","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",15,null],[11,"into_iter","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",20,null],[11,"into_iter","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"len","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",28,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",29,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contiguous_stride","","",28,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"contiguous_stride","","",29,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","ndarray","",32,{"inputs":[{"name":"self"}],"output":{"name":"shapeerror"}}],[11,"kind","","Return the `ErrorKind` of this error.",32,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"from_kind","","Create a new `ShapeError`",32,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",33,{"inputs":[{"name":"d"}],"output":{"name":"shape"}}],[11,"from","","",34,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_shape","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"f","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_f","","",33,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"strides","","",33,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"strideshape"}}],[11,"size","","Return the size of the shape in number of elements",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"from","","Create a new `Zip` from the input array or other producer `p`.",35,{"inputs":[{"name":"ip"}],"output":{"name":"self"}}],[11,"indexed","","Create a new `Zip` with an index producer and the producer `p`.",35,{"inputs":[{"name":"ip"}],"output":{"name":"self"}}],[11,"size","","Return a the number of element tuples in the Zip",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",35,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",35,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"split","","Split the `Zip` evenly in two.",35,null],[11,"into_inner","","Return the inner value",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_done","","Return true if it is `Done`, false if `Continue`",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prelude","","ndarray prelude.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's existing allocation. Semantically equivalent to `*self = other.clone()`, but potentially more efficient.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",6,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"linspace","","Create a one-dimensional array from the inclusive interval `[start, end]` with `n` elements. `A` must be a floating point type.",6,{"inputs":[{"name":"a"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"range","","Create a one-dimensional array from the half-open interval `[start, end)` with elements spaced by `step`. `A` must be a floating point type.",6,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"self"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",6,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",6,{"inputs":[{"name":"sh"},{"name":"a"}],"output":{"name":"self"}}],[11,"zeros","","Create an array with zeros, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"ones","","Create an array with ones, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"default","","Create an array with default values, shape `shape`",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"from_shape_fn","","Create an array with values created by the function `f`.",6,{"inputs":[{"name":"sh"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of elements needed.)",6,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"generics":["shapeerror"],"name":"result"}}],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the provided dimensions and strides. (No cloning of elements needed.)",6,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"self"}}],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",6,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"len","","Return the total number of elements in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_of","","Return the length of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"usize"}}],[11,"is_empty","","Return whether the array has any elements",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ndim","","Return the number of dimensions (axes) in the array",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dim","","Return the shape of the array in its “pattern” form, an integer in the one-dimensional case, tuple in the n-dimensional cases and so on.",6,null],[11,"raw_dim","","Return the shape of the array as it stored in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"shape","","Return the shape of the array as a slice.",6,null],[11,"strides","","Return the strides of the array as a slice",6,null],[11,"view","","Return a read-only view of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"view_mut","","Return a read-write view of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut"}}],[11,"to_owned","","Return an uniquely owned copy of the array",6,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"to_shared","","Return a shared ownership (copy on write) array.",6,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"into_owned","","Turn the array into a uniquely owned array, cloning the array elements to unshare them if necessary.",6,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array, without any copying.",6,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"iter","","Return an iterator of references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"indexeditermut"}}],[11,"slice","","Return a sliced view of the array.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arrayview"}}],[11,"slice_mut","","Return a sliced read-write view of the array.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arrayviewmut"}}],[11,"slice_move","","Slice the array, possibly changing the number of dimensions.",6,{"inputs":[{"name":"self"},{"name":"sliceinfo"}],"output":{"name":"arraybase"}}],[11,"slice_inplace","","Slice the array in place without changing the number of dimensions.",6,null],[11,"slice_axis","","Return a view of the array, sliced along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":{"name":"arrayview"}}],[11,"slice_axis_mut","","Return a mutable view of the array, sliced along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":{"name":"arrayviewmut"}}],[11,"slice_axis_inplace","","Slice the array in place along the specified axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"slice"}],"output":null}],[11,"get","","Return a reference to the element at `index`, or return `None` if the index is out of bounds.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None` if the index is out of bounds.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Perform unchecked array indexing.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"uget_mut","","Perform unchecked array indexing.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"swap","","Swap elements at indices `index1` and `index2`.",6,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[11,"uswap","","Swap elements unchecked at indices `index1` and `index2`.",6,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[11,"subview","","Along `axis`, select the subview `index` and return a view with that axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view with the axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"subview_inplace","","Collapse dimension `axis` into length one, and select the subview of `index` along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":null}],[11,"into_subview","","Along `axis`, select the subview `index` and return `self` with that axis removed.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`  and and copy them into a new array.",6,null],[11,"genrows","","Return a producer and iterable that traverses over the generalized rows of the array. For a 2D array these are the regular rows.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanes"}}],[11,"genrows_mut","","Return a producer and iterable that traverses over the generalized rows of the array and yields mutable array views.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanesmut"}}],[11,"gencolumns","","Return a producer and iterable that traverses over the generalized columns of the array. For a 2D array these are the regular columns.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanes"}}],[11,"gencolumns_mut","","Return a producer and iterable that traverses over the generalized columns of the array and yields mutable array views.",6,{"inputs":[{"name":"self"}],"output":{"name":"lanesmut"}}],[11,"lanes","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"lanes"}}],[11,"lanes_mut","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"lanesmut"}}],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,{"inputs":[{"name":"self"}],"output":{"name":"axisiter"}}],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension and yields each subview.",6,{"inputs":[{"name":"self"}],"output":{"name":"axisitermut"}}],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields each subview along it.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisiter"}}],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields each mutable subview along it.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisitermut"}}],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping views along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksiter"}}],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping read-write views along that axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksitermut"}}],[11,"exact_chunks","","Return an exact chunks producer (and iterable).",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"exactchunks"}}],[11,"exact_chunks_mut","","Return an exact chunks producer (and iterable).",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"exactchunksmut"}}],[11,"windows","","Return a window producer and iterable.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"windows"}}],[11,"diag","","Return an view of the diagonal elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview1"}}],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut1"}}],[11,"into_diag","","Return the diagonal as a one-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ix1"],"name":"arraybase"}}],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in memory (where the last index is the most rapidly varying).",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ptr","","Return a pointer to the first element in the array.",6,null],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",6,null],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of elements is accepted, but the source array or view must be contiguous, otherwise we cannot rearrange the dimension.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["arraybase","shapeerror"],"name":"result"}}],[11,"reshape","","Note: Reshape is for `RcArray` only. Use `.into_shape()` for other arrays and array views.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"arraybase"}}],[11,"into_dyn","","Convert any array or array view to a dynamic dimensional array or array view (respectively).",6,{"inputs":[{"name":"self"}],"output":{"generics":["ixdyn"],"name":"arraybase"}}],[11,"into_dimensionality","","Convert an array or array view to another with the same type, but different dimensionality type. Errors if the dimensions don't agree.",6,{"inputs":[{"name":"self"}],"output":{"generics":["arraybase","shapeerror"],"name":"result"}}],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting into a larger shape, if possible.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["arrayview"],"name":"option"}}],[11,"swap_axes","","Swap axes `ax` and `bx`.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"permuted_axes","","Permute the axes.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arraybase"}}],[11,"reversed_axes","","Transpose the array by reversing axes.",6,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"t","","Return a transposed view of the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"axes","","Return an iterator over the length and stride of each axis.",6,{"inputs":[{"name":"self"}],"output":{"name":"axes"}}],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value), preferring axes with len > 1.",6,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"invert_axis","","Reverse the stride of `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":null}],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"insert_axis","","Insert new array axis at `axis` and return the result.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"arraybase"}}],[11,"remove_axis","","Remove array axis `axis` and return the result.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"arraybase"}}],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step, calling the closure `f` on each element pair.",6,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"f"}],"output":null}],[11,"fold","","Traverse the array elements and apply a fold, returning the resulting value.",6,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"map","","Call `f` by reference on each element and create a new array with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv","","Call `f` by value on each element and create a new array with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv_into","","Call `f` by value on each element, update the array with the new values and return it.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each element. The array is updated with the new values.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"visit","","Visit each element in the array by calling `f` by reference on each element.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_axis","","Fold along an axis.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"b"},{"name":"f"}],"output":{"name":"array"}}],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new array with one less dimension.",6,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"f"}],"output":{"name":"array"}}],[11,"to_vec","","Return an vector with the elements of the one-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"row","","Return an array view of row `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"row_mut","","Return a mutable array view of row `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","Return an array view of column `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"column_mut","","Return a mutable array view of column `index`.",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_square","","Return true if the array is square, false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scalar_sum","","Return the sum of all elements in the array.",6,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"sum_axis","","Return sum along `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"mean_axis","","Return mean along `axis`.",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"all_close","","Return `true` if the arrays' elementwise differences are all within the given absolute tolerance, `false` otherwise.",6,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"a"}],"output":{"name":"bool"}}],[0,"linalg","","Linear algebra.",null,null],[5,"general_mat_mul","ndarray::linalg","General matrix-matrix multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[5,"general_mat_vec_mul","","General matrix-vector multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[11,"dot","ndarray","Perform dot product or matrix multiplication of arrays `self` and `rhs`.",6,null],[11,"dot","","Compute the dot product of one-dimensional arrays.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"a"}}],[11,"dot","","Perform the matrix multiplication of the row vector `self` and rectangular matrix `rhs`.",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"generics":["ix1"],"name":"array"}}],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",6,null],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"array2"}}],[11,"dot","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"generics":["ix1"],"name":"array"}}],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where `alpha` is a scalar and `rhs` is another array. This operation is also known as `axpy` in BLAS.",6,{"inputs":[{"name":"self"},{"name":"a"},{"name":"arraybase"}],"output":null}],[8,"Dot","ndarray::linalg","Matrix Multiplication",null,null],[16,"Output","","The result of the operation.",36,null],[10,"dot","","",36,null],[11,"add","ndarray","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"neg","","Perform an elementwise negation of `self` and return the result.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"not","","Perform an elementwise unary not of `self` and return the result.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"rem_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitand_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitand_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitor_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitor_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitxor_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitxor_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shl_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shl_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shr_assign","","",6,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shr_assign","","",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[6,"Ix0","","zero-dimensionial",null,null],[6,"Ix1","","one-dimensional",null,null],[6,"Ix2","","two-dimensional",null,null],[6,"Ix3","","three-dimensional",null,null],[6,"Ix4","","four-dimensional",null,null],[6,"Ix5","","five-dimensional",null,null],[6,"Ix6","","six-dimensional",null,null],[6,"IxDyn","","dynamic-dimensional",null,null],[6,"Array0","","zero-dimensional array",null,null],[6,"Array1","","one-dimensional array",null,null],[6,"Array2","","two-dimensional array",null,null],[6,"Array3","","three-dimensional array",null,null],[6,"Array4","","four-dimensional array",null,null],[6,"Array5","","five-dimensional array",null,null],[6,"Array6","","six-dimensional array",null,null],[6,"ArrayD","","dynamic-dimensional array",null,null],[6,"ArrayView0","","zero-dimensional array view",null,null],[6,"ArrayView1","","one-dimensional array view",null,null],[6,"ArrayView2","","two-dimensional array view",null,null],[6,"ArrayView3","","three-dimensional array view",null,null],[6,"ArrayView4","","four-dimensional array view",null,null],[6,"ArrayView5","","five-dimensional array view",null,null],[6,"ArrayView6","","six-dimensional array view",null,null],[6,"ArrayViewD","","dynamic-dimensional array view",null,null],[6,"ArrayViewMut0","","zero-dimensional read-write array view",null,null],[6,"ArrayViewMut1","","one-dimensional read-write array view",null,null],[6,"ArrayViewMut2","","two-dimensional read-write array view",null,null],[6,"ArrayViewMut3","","three-dimensional read-write array view",null,null],[6,"ArrayViewMut4","","four-dimensional read-write array view",null,null],[6,"ArrayViewMut5","","five-dimensional read-write array view",null,null],[6,"ArrayViewMut6","","six-dimensional read-write array view",null,null],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",null,null],[6,"RcArray1","","one-dimensional shared ownership array",null,null],[6,"RcArray2","","two-dimensional shared ownership array",null,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","An array where the data has shared ownership and is copy on write.",null,null],[6,"ArcArray","","An array where the data has shared ownership and is copy on write.",null,null],[6,"Array","","An array that owns its data uniquely.",null,null],[6,"ArrayView","","A read-only array view.",null,null],[6,"ArrayViewMut","","A read-write array view.",null,null],[8,"Dimension","","Array shape and index trait.",null,null],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this dimension.",37,null],[16,"Pattern","","Pattern matching friendly form of the dimension value.",37,null],[16,"Smaller","","Next smaller dimension (if applicable)",37,null],[16,"Larger","","Next larger dimension",37,null],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",37,null],[11,"size","","Compute the size of the dimension (number of elements)",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayviewmut1"}}],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,{"inputs":[{"name":"self"}],"output":{"name":"ixdyn"}}],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",37,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"IntoDimension","","Argument conversion a dimension.",null,null],[16,"Dim","","",38,null],[10,"into_dimension","","",38,null],[8,"RemoveAxis","","Array shape with a next smaller dimension.",null,null],[10,"remove_axis","","",39,null],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",null,null],[8,"AsArray","","Argument conversion into an array view",null,null],[8,"LinalgScalar","","Elements that support linear algebra operations.",null,null],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",null,null],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows customizing the memory layout (strides) of an array shape.",null,null],[16,"Dim","","",40,null],[16,"Strides","","",40,null],[10,"into_shape","","",40,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"f","","",40,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"set_f","","",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"shape"}}],[10,"strides","","",40,null],[8,"IndexLonger","","Extra indexing methods for array views",null,null],[16,"Output","","The type of the reference to the element that is produced, including its lifetime.",41,null],[10,"index","","Get a reference of a element through the view.",41,null],[10,"get","","Get a reference of a element through the view.",41,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[10,"uget","","Get a reference of a element through the view without boundary check",41,null],[8,"Data","","Array representation trait.",null,null],[16,"Elem","","The array element type.",42,null],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",42,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"DataMut","","Array representation trait.",null,null],[8,"DataOwned","","Array representation trait.",null,null],[8,"DataShared","","Array representation trait.",null,null],[8,"DataClone","","Array representation trait.",null,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",43,null],[10,"as_init_slice","","",43,null],[10,"len","","",43,{"inputs":[],"output":{"name":"usize"}}],[8,"NdProducer","","A producer of an n-dimensional set of elements; for example an array view, mutable array view or an iterator that yields chunks.",null,null],[16,"Item","","The element produced per iteration.",44,null],[16,"Dim","","Dimension type",44,null],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",44,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"IntoNdProducer","","Argument conversion into a producer.",null,null],[16,"Item","","The element produced per iteration.",45,null],[16,"Dim","","Dimension type of the producer",45,null],[16,"Output","","",45,null],[10,"into_producer","","Convert the value into an `NdProducer`.",45,null],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ownedrepr"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"viewrepr"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"strideshape"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"array","","Create an `Array` with one, two or three dimensions.",null,null],[14,"s","","Slice argument constructor.",null,null],[14,"stack","","Stack arrays along the given axis.",null,null],[14,"azip","","Array zip macro: lock step function application across several arrays and producers.",null,null],[11,"into_iter","","",46,null],[11,"into_iter","","",47,null],[11,"from","","",46,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",46,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"from","","",47,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",47,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"into_dimension","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ix1"}}],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",37,null],[11,"size","","Compute the size of the dimension (number of elements)",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",37,{"inputs":[{"name":"self"}],"output":{"generics":["ix"],"name":"arrayviewmut1"}}],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",37,{"inputs":[{"name":"self"}],"output":{"name":"ixdyn"}}],[11,"ndim","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",49,null],[11,"slice_mut","","",49,null],[11,"into_pattern","","",49,null],[11,"zero_index","","",49,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"zero_index_with_ndim","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert_axis","","",49,null],[11,"try_remove_axis","","",49,null],[11,"from_dimension","","",49,{"inputs":[{"name":"d2"}],"output":{"name":"option"}}],[11,"zeros","","Create a new dimension value with `n` axes, all zeros",49,{"inputs":[{"name":"usize"}],"output":{"name":"ixdyn"}}],[11,"index_checked","","",48,{"inputs":[{"name":"self"},{"name":"ix1"},{"name":"ix1"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",48,{"inputs":[{"name":"self"},{"name":"ix1"}],"output":{"name":"isize"}}],[11,"index_checked","","",48,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"generics":["isize"],"name":"option"}}],[11,"index_unchecked","","",48,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"fmt","ndarray::iter","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","ndarray","",51,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",52,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"contiguous_stride","","",46,null],[11,"contiguous_stride","","",47,null],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are stored internally.",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",46,null],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a raw pointer to the elements.",46,null],[11,"reborrow","","Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",46,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"split_at","","Split the array view along `axis` and return one view strictly before the split and one view after the split.",46,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",47,null],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",47,null],[11,"reborrow","","Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",47,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut"}}],[11,"split_at","","Split the array view along `axis` and return one mutable view strictly before the split and one mutable view after the split.",47,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Convert a mutable array view to a mutable reference of a element.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"get","","Convert a mutable array view to a mutable reference of a element, with checked access.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Convert a mutable array view to a mutable reference of a element without boundary check.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Slice"],[4,"ErrorKind"],[4,"SliceOrIndex"],[4,"FoldWhile"],[3,"ArrayBase"],[3,"OwnedArcRepr"],[3,"OwnedRepr"],[3,"ViewRepr"],[3,"IxDynImpl"],[3,"Dim"],[3,"SliceInfo"],[3,"IndicesIter"],[3,"Indices"],[3,"ExactChunks"],[3,"ExactChunksMut"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"Windows"],[3,"Lanes"],[3,"LanesMut"],[3,"Iter"],[3,"IndexedIter"],[3,"IterMut"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[3,"Zip"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"IndexLonger"],[8,"Data"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[3,"Axes"],[6,"Array1"],[6,"Array2"],[6,"Array3"],[6,"Array"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_ru"] = {"doc":"","items":[[5,"test_function","num_ru","",null,{"inputs":[],"output":null}],[5,"amin","","",null,{"inputs":[{"name":"array"}],"output":{"name":"a"}}],[5,"amax","","",null,{"inputs":[{"name":"array"}],"output":{"name":"a"}}],[5,"sin","","Computes element-wise sin on an ndarray Array",null,{"inputs":[{"name":"array"}],"output":{"name":"array"}}]],"paths":[]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",24,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","num_traits","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["rawpointer"] = {"doc":"","items":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to `end`. Return the arithmetic difference if `T` is zero size.",null,null],[8,"PointerExt","","Extension methods for raw pointers",null,null],[10,"offset","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"pre_inc","","Increment the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_inc","","Increment the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pre_dec","","Decrement the pointer by 1, and return its new value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"post_dec","","Decrement the pointer by 1, but return its old value.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inc","","Increment by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"dec","","Decrement by 1",0,{"inputs":[{"name":"self"}],"output":null}],[11,"stride_offset","","Offset the pointer by `s` multiplied by `index`.",0,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"usize"}],"output":{"name":"self"}}]],"paths":[[8,"PointerExt"]]};
initSearch(searchIndex);
